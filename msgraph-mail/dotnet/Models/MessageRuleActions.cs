// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Graphdotnetv4.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class MessageRuleActions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of categories to be assigned to a message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AssignCategories { get; set; }
#nullable restore
#else
        public List<string> AssignCategories { get; set; }
#endif
        /// <summary>The ID of a folder that a message is to be copied to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CopyToFolder { get; set; }
#nullable restore
#else
        public string CopyToFolder { get; set; }
#endif
        /// <summary>Indicates whether a message should be moved to the Deleted Items folder.</summary>
        public bool? Delete { get; set; }
        /// <summary>The email addresses of the recipients to which a message should be forwarded as an attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Graphdotnetv4.Models.Recipient>? ForwardAsAttachmentTo { get; set; }
#nullable restore
#else
        public List<global::Graphdotnetv4.Models.Recipient> ForwardAsAttachmentTo { get; set; }
#endif
        /// <summary>The email addresses of the recipients to which a message should be forwarded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Graphdotnetv4.Models.Recipient>? ForwardTo { get; set; }
#nullable restore
#else
        public List<global::Graphdotnetv4.Models.Recipient> ForwardTo { get; set; }
#endif
        /// <summary>Indicates whether a message should be marked as read.</summary>
        public bool? MarkAsRead { get; set; }
        /// <summary>The markImportance property</summary>
        public global::Graphdotnetv4.Models.Importance? MarkImportance { get; set; }
        /// <summary>The ID of the folder that a message will be moved to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MoveToFolder { get; set; }
#nullable restore
#else
        public string MoveToFolder { get; set; }
#endif
        /// <summary>Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder.</summary>
        public bool? PermanentDelete { get; set; }
        /// <summary>The email addresses to which a message should be redirected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Graphdotnetv4.Models.Recipient>? RedirectTo { get; set; }
#nullable restore
#else
        public List<global::Graphdotnetv4.Models.Recipient> RedirectTo { get; set; }
#endif
        /// <summary>Indicates whether subsequent rules should be evaluated.</summary>
        public bool? StopProcessingRules { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Graphdotnetv4.Models.MessageRuleActions"/> and sets the default values.
        /// </summary>
        public MessageRuleActions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Graphdotnetv4.Models.MessageRuleActions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Graphdotnetv4.Models.MessageRuleActions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Graphdotnetv4.Models.MessageRuleActions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assignCategories", n => { AssignCategories = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "copyToFolder", n => { CopyToFolder = n.GetStringValue(); } },
                { "delete", n => { Delete = n.GetBoolValue(); } },
                { "forwardAsAttachmentTo", n => { ForwardAsAttachmentTo = n.GetCollectionOfObjectValues<global::Graphdotnetv4.Models.Recipient>(global::Graphdotnetv4.Models.Recipient.CreateFromDiscriminatorValue)?.AsList(); } },
                { "forwardTo", n => { ForwardTo = n.GetCollectionOfObjectValues<global::Graphdotnetv4.Models.Recipient>(global::Graphdotnetv4.Models.Recipient.CreateFromDiscriminatorValue)?.AsList(); } },
                { "markAsRead", n => { MarkAsRead = n.GetBoolValue(); } },
                { "markImportance", n => { MarkImportance = n.GetEnumValue<global::Graphdotnetv4.Models.Importance>(); } },
                { "moveToFolder", n => { MoveToFolder = n.GetStringValue(); } },
                { "permanentDelete", n => { PermanentDelete = n.GetBoolValue(); } },
                { "redirectTo", n => { RedirectTo = n.GetCollectionOfObjectValues<global::Graphdotnetv4.Models.Recipient>(global::Graphdotnetv4.Models.Recipient.CreateFromDiscriminatorValue)?.AsList(); } },
                { "stopProcessingRules", n => { StopProcessingRules = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("assignCategories", AssignCategories);
            writer.WriteStringValue("copyToFolder", CopyToFolder);
            writer.WriteBoolValue("delete", Delete);
            writer.WriteCollectionOfObjectValues<global::Graphdotnetv4.Models.Recipient>("forwardAsAttachmentTo", ForwardAsAttachmentTo);
            writer.WriteCollectionOfObjectValues<global::Graphdotnetv4.Models.Recipient>("forwardTo", ForwardTo);
            writer.WriteBoolValue("markAsRead", MarkAsRead);
            writer.WriteEnumValue<global::Graphdotnetv4.Models.Importance>("markImportance", MarkImportance);
            writer.WriteStringValue("moveToFolder", MoveToFolder);
            writer.WriteBoolValue("permanentDelete", PermanentDelete);
            writer.WriteCollectionOfObjectValues<global::Graphdotnetv4.Models.Recipient>("redirectTo", RedirectTo);
            writer.WriteBoolValue("stopProcessingRules", StopProcessingRules);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
