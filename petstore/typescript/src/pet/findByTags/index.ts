/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPetFromDiscriminatorValue, type Pet } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /pet/findByTags
 */
export interface FindByTagsRequestBuilder extends BaseRequestBuilder<FindByTagsRequestBuilder> {
    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Pet[]>}
     * @deprecated 
     */
     get(requestConfiguration?: RequestConfiguration<FindByTagsRequestBuilderGetQueryParameters> | undefined) : Promise<Pet[] | undefined>;
    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     * @deprecated 
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FindByTagsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export interface FindByTagsRequestBuilderGetQueryParameters {
    /**
     * Tags to filter by
     */
    tags?: string[];
}
/**
 * Uri template for the request builder.
 */
export const FindByTagsRequestBuilderUriTemplate = "{+baseurl}/pet/findByTags?tags={tags}";
/**
 * Metadata for all the requests in the request builder.
 */
export const FindByTagsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FindByTagsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createPetFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
