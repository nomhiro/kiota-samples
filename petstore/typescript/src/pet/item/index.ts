/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPetFromDiscriminatorValue, type Pet } from '../../models/index.js';
// @ts-ignore
import { type UploadImageRequestBuilder, UploadImageRequestBuilderRequestsMetadata } from './uploadImage/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WithPetPostRequestBody}
 */
export function createWithPetPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWithPetPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWithPetPostRequestBody(withPetPostRequestBody: Partial<WithPetPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { withPetPostRequestBody.name = n.getStringValue(); },
        "status": n => { withPetPostRequestBody.status = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWithPetPostRequestBody(writer: SerializationWriter, withPetPostRequestBody: Partial<WithPetPostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("name", withPetPostRequestBody.name);
    writer.writeStringValue("status", withPetPostRequestBody.status);
    writer.writeAdditionalData(withPetPostRequestBody.additionalData);
}
/**
 * Builds and executes requests for operations under /pet/{petId}
 */
export interface WithPetItemRequestBuilder extends BaseRequestBuilder<WithPetItemRequestBuilder> {
    /**
     * The uploadImage property
     */
    get uploadImage(): UploadImageRequestBuilder;
    /**
     * Deletes a pet
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Returns a single pet
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Pet>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Pet | undefined>;
    /**
     * Updates a pet in the store with form data
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     post(body: WithPetPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Returns a single pet
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: WithPetPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface WithPetPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Updated name of the pet
     */
    name?: string;
    /**
     * Updated status of the pet
     */
    status?: string;
}
/**
 * Uri template for the request builder.
 */
export const WithPetItemRequestBuilderUriTemplate = "{+baseurl}/pet/{petId}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WithPetItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WithPetItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    uploadImage: {
        requestsMetadata: UploadImageRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WithPetItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WithPetItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: WithPetItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createPetFromDiscriminatorValue,
    },
    post: {
        uriTemplate: WithPetItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/x-www-form-urlencoded",
        requestBodySerializer: serializeWithPetPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
